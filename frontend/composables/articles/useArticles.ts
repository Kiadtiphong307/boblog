import { ref, watch, onMounted, onUnmounted } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import type { Article, Category, Comment } from '~/types/article'

// üì¶ Read: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
export function useProductList() {
  // raw data
  const articles = ref<Article[]>([])
  const categories = ref<Category[]>([])
  // filters
  const selectedCategory = ref<string | number>('')
  const searchTerm = ref('')
  const localSearchTerm = ref('') // for immediate v-model
  const loading = ref(true)
  let debounceTimer: NodeJS.Timeout | null = null

  // pagination state
  const currentPage = ref(1)
  const perPage = ref(4) // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
  const totalPages = computed(() =>
    Math.ceil(articles.value.length / perPage.value) || 1
  )
  const paginatedArticles = computed(() => {
    const start = (currentPage.value - 1) * perPage.value
    return articles.value.slice(start, start + perPage.value)
  })

  const goToPage = (page: number) => {
    if (page >= 1 && page <= totalPages.value) {
      currentPage.value = page
    }
  }
  const nextPage = () => {
    if (currentPage.value < totalPages.value) currentPage.value++
  }
  const prevPage = () => {
    if (currentPage.value > 1) currentPage.value--
  }

  // fetch categories
  const fetchCategories = async () => {
    try {
      const res = await $fetch<{ data: Category[] }>('/api/categories')
      categories.value = res.data || []
    } catch (err) {
      console.error('‚ùå Failed to load categories:', err)
    }
  }

  // fetch articles (reset to page 1 ‡πÄ‡∏°‡∏∑‡πà‡∏≠ filter/search ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
  const fetchArticles = async () => {
    loading.value = true
    currentPage.value = 1

    const query = new URLSearchParams()
    if (searchTerm.value.trim()) query.append('search', searchTerm.value.trim())
    if (selectedCategory.value) query.append('category_id', selectedCategory.value.toString())

    try {
      const res = await $fetch<{ data: Article[] }>(`/api/articles?${query.toString()}`)
      articles.value = res.data || []
    } catch (err) {
      console.error('‚ùå Error loading articles:', err)
      articles.value = []
    } finally {
      loading.value = false
    }
  }

  // debounced search term setter
  const debouncedSearch = (value: string) => {
    if (debounceTimer) clearTimeout(debounceTimer)
    debounceTimer = setTimeout(() => {
      searchTerm.value = value
    }, 500)
  }
  const updateSearchTerm = (value: string) => {
    localSearchTerm.value = value
    debouncedSearch(value)
  }
  const updateSelectedCategory = (value: string | number) => {
    selectedCategory.value = value
  }

  const formatDate = (dateStr: string): string => {
    const date = new Date(dateStr)
    return date.toLocaleDateString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
  }

  onUnmounted(() => {
    if (debounceTimer) clearTimeout(debounceTimer)
  })
  onMounted(() => {
    fetchCategories()
    fetchArticles()
  })
  watch([searchTerm, selectedCategory], fetchArticles)

  return {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ articles ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà paginatedArticles
    articles: paginatedArticles,
    categories,
    selectedCategory,
    searchTerm: localSearchTerm,
    loading,
    fetchArticles,
    formatDate,
    updateSearchTerm,
    updateSelectedCategory,
    // exports ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
    currentPage,
    totalPages,
    goToPage,
    nextPage,
    prevPage,
  }
}

// üìù Create: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
export function useProductForm() {
  const router = useRouter()
  const title = ref('')
  const slug = ref('')
  const content = ref('')
  const categoryName = ref('')
  const tags = ref('')
  const error = ref<Record<string, string>>({})
  const success = ref(false)

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á slug ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å title
  const slugify = (text: string): string =>
    text
      .toLowerCase()
      .trim()
      .normalize('NFD')
      .replace(/[^\p{L}\p{N}\s-]/gu, '')
      .replace(/[\s_-]+/g, '-')
      .replace(/^-+|-+$/g, '')

  watch(title, (newTitle) => {
    slug.value = slugify(newTitle)
  })

  // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  const handleSubmit = async () => {
    error.value = {}
    success.value = false

    const token = localStorage.getItem('token')
    if (!token) {
      error.value.general = '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°'
      return
    }

    try {
      await $fetch('/api/articles', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: {
          title: title.value,
          slug: slug.value,
          content: content.value,
          category_name: categoryName.value,
          tag_names: tags.value ? tags.value.split(',').map((t) => t.trim()).filter(Boolean) : [],
        },
      })

      success.value = true
      title.value = ''
      slug.value = ''
      content.value = ''
      categoryName.value = ''
      tags.value = ''

      setTimeout(() => router.push('/articles'), 1500)
    } catch (e: any) {
      if (e?.data?.errors) {
        error.value = e.data.errors
      } else if (e?.data?.error) {
        error.value.general = e.data.error
      } else {
        error.value.general = '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°'
      }
    }
  }

  return {
    title,
    slug,
    content,
    categoryName,
    tags,
    error,
    success,
    handleSubmit,
  }
}

// üîç Read + üí¨ Comment: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
export function useProductDetail() {
  const route = useRoute()
  const article = ref<Article | null>(null)
  const comments = ref<Comment[]>([])
  const newComment = ref('')

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° slug
  const fetchArticle = async () => {
    const token = localStorage.getItem('token')
    try {
      const res = await $fetch<{data: Article}>(`/api/articles/${route.params.slug}`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      article.value = (res as any).data
    } catch (err) {
      console.error('‚ùå Failed to load article:', err)
    }
  }

// ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô ‡πÜ
const fetchComments = async () => {
  const token = localStorage.getItem('token')
  try {
    const res = await $fetch(`/api/articles/${route.params.slug}/comments`, {
      headers: { Authorization: `Bearer ${token}` },
    })
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    console.log('Response from API:', res)
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (res && typeof res === 'object') {
      // ‡∏ñ‡πâ‡∏≤ response ‡∏°‡∏µ property data
      if ('data' in res) {
        comments.value = (res as any).data || []
      } 
      // ‡∏ñ‡πâ‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô array ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      else if (Array.isArray(res)) {
        comments.value = res
      }
      // ‡∏ñ‡πâ‡∏≤ response ‡∏°‡∏µ property comments
      else if ('comments' in res) {
        comments.value = (res as any).comments || []
      }
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î‡πÄ‡∏•‡∏¢
      else {
        comments.value = []
        console.warn('Unexpected response structure:', res)
      }
    } else {
      comments.value = []
    }
    
    console.log('Comments loaded:', comments.value)
  } catch (err) {
    console.error('‚ùå Failed to load comments:', err)
    comments.value = []
  }
}

// ‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà
const submitComment = async () => {
  const token = localStorage.getItem('token')
  if (!token) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô')
    return
  }
  if (!newComment.value.trim()) return

  try {
    const response = await $fetch(`/api/articles/${route.params.slug}/comments`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: {
        content: newComment.value,
      },
    })
    
    console.log('Comment posted:', response)
    
    newComment.value = ''
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä comments ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    await fetchComments()
  } catch (err) {
    console.error('‚ùå Failed to post comment:', err)
    alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
  }
}

  const formatDate = (iso: string) =>
    new Date(iso).toLocaleString('th-TH', {
      dateStyle: 'medium',
      timeStyle: 'short',
    })

  onMounted(() => {
    fetchArticle()
    fetchComments()
  })

  return {
    article,
    comments,
    newComment,
    fetchArticle,
    fetchComments,
    submitComment,
    formatDate,
  }
}
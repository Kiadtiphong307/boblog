import type { Article } from "~/types/article"
import type { Comment } from "~/types/article"

// üîç Read + üí¨ Comment: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
export function useComment() {
    const route = useRoute()
    const article = ref<Article | null>(null)
    const comments = ref<Comment[]>([])
    const newComment = ref('')
  
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° slug
    const fetchArticle = async () => {
      const token = localStorage.getItem('token')
      try {
        const res = await $fetch<{data: Article}>(`/api/articles/${route.params.slug}`, {
          headers: { Authorization: `Bearer ${token}` },
        })
        article.value = (res as any).data
      } catch (err) {
        console.error('‚ùå Failed to load article:', err)
      }
    }
  
  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô ‡πÜ
  const fetchComments = async () => {
    const token = localStorage.getItem('token')
    try {
      const res = await $fetch(`/api/articles/${route.params.slug}/comments`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
      console.log('Response from API:', res)
      
      // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (res && typeof res === 'object') {
        // ‡∏ñ‡πâ‡∏≤ response ‡∏°‡∏µ property data
        if ('data' in res) {
          comments.value = (res as any).data || []
        } 
        // ‡∏ñ‡πâ‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô array ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        else if (Array.isArray(res)) {
          comments.value = res
        }
        // ‡∏ñ‡πâ‡∏≤ response ‡∏°‡∏µ property comments
        else if ('comments' in res) {
          comments.value = (res as any).comments || []
        }
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î‡πÄ‡∏•‡∏¢
        else {
          comments.value = []
          console.warn('Unexpected response structure:', res)
        }
      } else {
        comments.value = []
      }
      
      console.log('Comments loaded:', comments.value)
    } catch (err) {
      console.error('‚ùå Failed to load comments:', err)
      comments.value = []
    }
  }
  
  // ‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà
  const submitComment = async () => {
    const token = localStorage.getItem('token')
    if (!token) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô')
      return
    }
    if (!newComment.value.trim()) return
  
    try {
      const response = await $fetch(`/api/articles/${route.params.slug}/comments`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: {
          content: newComment.value,
        },
      })
      
      console.log('Comment posted:', response)
      
      newComment.value = ''
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä comments ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      await fetchComments()
    } catch (err) {
      console.error('‚ùå Failed to post comment:', err)
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
    }
  }
  
    const formatDate = (iso: string) =>
      new Date(iso).toLocaleString('th-TH', {
        dateStyle: 'medium',
        timeStyle: 'short',
      })
  
    onMounted(() => {
      fetchArticle()
      fetchComments()
    })
  
    return {
      article,
      comments,
      newComment,
      fetchArticle,
      fetchComments,
      submitComment,
      formatDate,
    }
  }
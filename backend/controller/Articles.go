package controller

import (
	"blog-db/database"
	"blog-db/models"
	"blog-db/utils"
	"log"
	"net/url"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/golang-jwt/jwt/v5"

)


// Get all articles
func GetAllArticles(c *fiber.Ctx) error {
	var articles []models.Article

	err := database.DB.
		Preload("Author").
		Preload("Category").
		Preload("Tags").
		Preload("Comments").
		Find(&articles).Error

	if err != nil {
		log.Println("‚ùå Error getting all articles:", err)
		return c.Status(500).JSON(utils.ErrorResponse("Failed to get articles"))
	}

	log.Println("‚úÖ Retrieved all articles")
	return c.JSON(utils.SuccessResponse(articles, "All articles retrieved"))
}

// Search articles
func SearchArticles(c *fiber.Ctx) error {
	var articles []models.Article

	search := c.Query("search")
	categoryID := c.Query("category_id")

	tx := database.DB.
		Preload("Author").
		Preload("Category").
		Preload("Tags").
		Preload("Comments")

	if search != "" {
		tx = tx.Where("title LIKE ?", "%"+search+"%")
	}

	if categoryID != "" {
		tx = tx.Where("category_id = ?", categoryID)
	}

	if err := tx.Find(&articles).Error; err != nil {
		log.Println("‚ùå Error filtering articles:", err)
		return c.Status(500).JSON(utils.ErrorResponse("Failed to filter articles"))
	}

	log.Println("‚úÖ Retrieved filtered articles")
	return c.JSON(utils.SuccessResponse(articles, "Filtered articles retrieved"))
}

// Get article by slug
func GetArticleBySlug(c *fiber.Ctx) error {
	slug := c.Params("slug")
	var article models.Article

	err := database.DB.
		Preload("Author").
		Preload("Category").
		Preload("Tags").
		Preload("Comments").
		First(&article, "slug = ?", slug).Error

	if err != nil {
		log.Println("‚ùå Article not found:", err)
		return c.Status(404).JSON(utils.ErrorResponse("Article not found"))
	}

	return c.JSON(utils.SuccessResponse(article, "Article retrieved successfully"))
}

// Get my articles
func GetMyArticles(c *fiber.Ctx) error {
	user := c.Locals("user").(*jwt.Token)
	claims := user.Claims.(jwt.MapClaims)
	userID := claims["id"].(float64)

	var articles []models.Article
	if err := database.DB.Where("author_id = ?", uint(userID)).Find(&articles).Error; err != nil {
		return c.Status(500).JSON(fiber.Map{
			"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ",
		})
	}

	return c.JSON(fiber.Map{
		"data": articles,
	})
}

// CreateArticle creates a new article
func CreateArticle(c *fiber.Ctx) error {
	var input struct {
		Title        string   `json:"title" validate:"required"`
		Slug         string   `json:"slug" validate:"required"`
		Content      string   `json:"content" validate:"required"`
		CategoryName string   `json:"category_name" validate:"required"` // ‚úÖ ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
		TagNames     []string `json:"tag_names"`
	}

	// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô struct
	if err := c.BodyParser(&input); err != nil {
		return c.Status(400).JSON(utils.ErrorResponse("Invalid input"))
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if err := validate.Struct(input); err != nil {
		return c.Status(400).JSON(utils.ErrorResponse("Validation failed: " + err.Error()))
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à slug ‡∏ã‡πâ‡∏≥
	var exist models.Article
	if err := database.DB.Where("slug = ?", input.Slug).First(&exist).Error; err == nil {
		return c.Status(400).JSON(utils.ErrorResponse("Slug already exists"))
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á user ID ‡∏à‡∏≤‡∏Å JWT
	userToken := c.Locals("user").(*jwt.Token)
	claims := userToken.Claims.(jwt.MapClaims)
	authorID := uint(claims["id"].(float64))

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
	var category models.Category
	if err := database.DB.Where("name = ?", input.CategoryName).First(&category).Error; err != nil {
		category = models.Category{Name: input.CategoryName}
		if err := database.DB.Create(&category).Error; err != nil {
			return c.Status(500).JSON(utils.ErrorResponse("Failed to create category: " + input.CategoryName))
		}
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á tag
	var tags []models.Tags
	for _, name := range input.TagNames {
		name = strings.TrimSpace(name)
		if name == "" {
			continue
		}
		var tag models.Tags
		if err := database.DB.Where("name = ?", name).First(&tag).Error; err != nil {
			tag = models.Tags{Name: name}
			if err := database.DB.Create(&tag).Error; err != nil {
				return c.Status(500).JSON(utils.ErrorResponse("Failed to create tag: " + name))
			}
		}
		tags = append(tags, tag)
	}

	// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
	article := models.Article{
		Title:      input.Title,
		Slug:       input.Slug,
		Content:    input.Content,
		AuthorID:   authorID,
		CategoryID: category.ID,
		Tags:       tags,
	}

	if err := database.DB.Create(&article).Error; err != nil {
		return c.Status(500).JSON(utils.ErrorResponse("Failed to create article"))
	}

	return c.Status(201).JSON(utils.SuccessResponse(article, "‚úÖ Article created successfully"))
}

// UpdateArticle updates an existing article
func UpdateArticle(c *fiber.Ctx) error {
	slug := c.Params("slug")
	user := c.Locals("user").(*jwt.Token)
	claims := user.Claims.(jwt.MapClaims)
	userID := uint(claims["id"].(float64))

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏î‡∏¥‡∏°
	var article models.Article
	if err := database.DB.Preload("Tags").First(&article, "slug = ?", slug).Error; err != nil {
		return c.Status(404).JSON(utils.ErrorResponse("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°"))
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
	if article.AuthorID != userID {
		return c.Status(403).JSON(utils.ErrorResponse("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ"))
	}

	// ‚úÖ ‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å client
	var input struct {
		Title      string `json:"title"`
		Content    string `json:"content"`
		CategoryID uint   `json:"category_id"`
		TagIDs     []uint `json:"tag_ids"`
	}

	if err := c.BodyParser(&input); err != nil {
		return c.Status(400).JSON(utils.ErrorResponse("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"))
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
	var category models.Category
	if err := database.DB.First(&category, input.CategoryID).Error; err != nil {
		return c.Status(400).JSON(utils.ErrorResponse("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"))
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï field ‡∏´‡∏•‡∏±‡∏Å
	article.Title = input.Title
	article.Content = input.Content
	article.CategoryID = input.CategoryID

	if err := database.DB.Save(&article).Error; err != nil {
		return c.Status(500).JSON(utils.ErrorResponse("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"))
	}

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ó‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞ Replace (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
	if len(input.TagIDs) > 0 {
		var newTags []models.Tags
		if err := database.DB.Where("id IN ?", input.TagIDs).Find(&newTags).Error; err != nil {
			return c.Status(500).JSON(utils.ErrorResponse("‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ó‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"))
		}
		if err := database.DB.Model(&article).Association("Tags").Replace(&newTags); err != nil {
			return c.Status(500).JSON(utils.ErrorResponse("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ó‡πá‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"))
		}
	} else {
		// ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
		if err := database.DB.Model(&article).Association("Tags").Clear(); err != nil {
			return c.Status(500).JSON(utils.ErrorResponse("‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"))
		}
	}

	return c.JSON(utils.SuccessResponse(article, "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"))
}

// DeleteArticle deletes an article by slug (only by the author)
func DeleteArticle(c *fiber.Ctx) error {
	encodedSlug := c.Params("slug")
	slug, err := url.QueryUnescape(encodedSlug)
	if err != nil {
		return c.Status(400).JSON(utils.ErrorResponse("Slug ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"))
	}

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å JWT
	user := c.Locals("user").(*jwt.Token)
	claims := user.Claims.(jwt.MapClaims)
	userID := uint(claims["id"].(float64))

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å slug ‡∏û‡∏£‡πâ‡∏≠‡∏° preload ‡πÅ‡∏ó‡πá‡∏Å
	var article models.Article
	if err := database.DB.Preload("Tags").First(&article, "slug = ?", slug).Error; err != nil {
		return c.Status(404).JSON(utils.ErrorResponse("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°"))
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
	if article.AuthorID != userID {
		return c.Status(403).JSON(utils.ErrorResponse("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ"))
	}

	// ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏Å
	if err := database.DB.Model(&article).Association("Tags").Clear(); err != nil {
		log.Println("‚ùå ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö Tags ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err)
		return c.Status(500).JSON(utils.ErrorResponse("‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"))
	}

	// ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
	if err := database.DB.Delete(&article).Error; err != nil {
		log.Println("üî• ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err)
		return c.Status(500).JSON(utils.ErrorResponse("‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"))
	}

	return c.JSON(utils.SuccessResponse(nil, "‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"))
}
